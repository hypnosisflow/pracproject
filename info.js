// let class return function - reserved words! 
  
    Тип данных 

    // number 
Infinity-бесконечность
NaN-вычислительная ошибка ( не число / 2 )

// BigInt
чилса с большими значениями с буквой 'n' на конце
const bigInt = 1313131231231321321n

// string
обратные кавычки встраивают выражения в ${...}
let name = John;
alert( `Hello, ${name}!`); // Hello, John!

// Булевый тип boolean
значения true/false 

// null 
значение "ничего" 
let age = null

// undefined 
значение не было присвоено 
let age;
alert(age); // выведет "undefined"

// Object 
для коллекции данных и сложных структур 
    Symbol
уникальные идентификаторы 

// typeof 
возвращает тип аргумента 
для оператор: typeof x
для функции: typeof(x)

    ФУНКЦИИ 
// alert 
показывает сообщение 

// prompt
сообщение и ввод текста 

// confirm
сообщение и возврат true/false 

       *** ПРЕОБРАЗОВАНИЕ ***

// строковое 
когда нам нужно что то вывести 
String(value)

// численное 
происходит в математических операциях
Number(value)
    undefined > NaN
    null > 0 
    true/false > 1/0

// логическое 
происходит в логических операциях 
Boolean(value)
    0, null, undefined, NaN, ""  >   false
    любое другое значение > true 
* undefined при чесленном преоб  > NaN , не 0 
* "0" и "_" > true 

    *** ОПЕРАТОРЫ *** 

// % - Взятие остаттка 
alert( 5 % 2 ) // 1 - остаток от деления 5 и 2 

// ** - возведение в степень 
alert( 2 ** 4 ) 

// + может обьединять строки 
let s = "моя" + " строка"
alert(s); "моя строка"

// инкремент / девремент 
++ / -- (1)
префикс - использовать результат
постфикс - увеличить но получить значени до увелечения 

// оператор запятая 
let a = ( 1 + 2, 3 = 4 );
alert(a); // 7, выводит значение только последнего 

    *** ОПЕРАТОР СРАВНЕНИЯ ***

// сравнения строк
сравнение разных типов приводит каждое из них к числу

// строгое сравнение 
0 == false / true, таак как преобразует строки к числу
0 === false / false 

// null undefined
alert( null === undefined ); false
alert( null == undefined); true / значения равны друг другу и не равны другим значениями

при использовании < > <= >=
null = 0 
undefined = NaN

    *** УСЛОВНОЕ ВЕТВЛЕНИЕ *** 

- число 0, "", null, undefined, NaN - falsy
- остальные - truthy

// if ... else (иначе)
выполняется когда уловие ложно 

let year = prompt("v kakom godu?")

if (year == 2015) {
    alert( 'da' );
} else {
    alert( 'net' );
}

// else if 
когда нужно проверить несколько вариантов условий 

if (year < 2015) {
    alert( 'slishkom rano' );
} else if (year > 2015) { 
    alert( "pozdno" );
} else { 
    alert( "verno" );
}

// "?"
когда нужно определить переменную в зависимости от условия 

синтаксис 
let result = условие ? значение1 : значение2;

если условие истинно, возвращается знач1Б в противном случае - знач2

let accessAllowed = (age > 18) ? true : false; 

последовательность оператора ? вернет значение зависящее более чем от 
одного условия 

let message = (age < 3) ? 'Здравствуй, малыш!' :
  (age < 18) ? 'Привет!' :
  (age < 100) ? 'Здравствуйте!' :
  'Какой необычный возраст!';

иногда ? выступаевт в роли if 

let company = prompt('Какая компания создала JavaScript?', '');

(company == 'Netscape') ?
   alert('Верно!') : alert('Неправильно.');

    *** ЛОГИЧЕСКИЕ ОПЕРАТОРЫ *** 

// || (или) && (и) ! (не)

|| редультат операции всешда true (false||false=false)

let hour = 12;
let isWeekend = true; 

if (hour < 10 || hour > 18 || isWeekend) { 
    alert( "Office cloesed" );
}

- вычисляет операнды слева направо 
- если рез true останавливается и возвращает исходное значение
- если все false возвращает последний из них 

alert( 1 || 0 ); // 1
alert( true || 'no matter what' ); // true

alert( null || 1 ); // 1 (первое истинное значение)
alert( null || 0 || 1 ); // 1 (первое истинное значение)
alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)ж

// && (приоритет выше чем у ||)
возвращает тру если оба аргументы истинны, иначе false 

- слева направо 
- первое ложное значение false 
- если все true возвращает последний 

alert( 1 && 2 && null && 3 ); // null

// ! - высший приоритет 
result = !value 
- приводит аргумент к лог типу true/false 
- возвращает противоположное значение 
- двойное НЕ - преобразует к лог типу 
    alert( !!null ); // false 

// оператор объединения с null '??'
  возвращает первый аргумент если он не null или undefined 
    a ?? b
        -а, если значение а определеноо 
        -б, если значение а неопределенно;

let user;

alert(user ?? "Аноним"); // Аноним

- || возвращает первое true значение (false, 0, "", null, undefined - не различает )
- ?? возвращает первое определенное значение 

!важно использовать () изза низкого приоритета 

let x = (1 && 2) ?? 3; // Работает без ошибок

alert(x); // 2

// циклы WHILE FOR ///////////////////////////////////////
синтаксис
    while (condition) { 
        // kod 
        // telo cikla 
    }
/////////////////////////////////////////////////////////

do { 
    // telo cikla
} while (condition);

цикл выолнит тело, хатем проверит условие, и пока значение
равно  тру будет выполняться снова и снова. 

////////////////////////////////////////////////////////
for (начало; условин; шаг) {
    // тело цикла
}

for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
    alert(i);
  }

// break 
позволяет остановить цикл 

// continue 
прерывает цикл 